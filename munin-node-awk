#!/usr/bin/gawk -f
# munin-node-awk
# Copyright (C) 2010 Kristian Lyngst√∏l <kristian@bohemians.org>
# Copyright (C) 2010 Varnish Software
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

#############################
# Auxiliary functions       #
#############################

# Debug: Print content if debug is level or higher.
function d(level, content) {
	if (level<=debug) {
		print content
	}
}

# Print to the client.
function mpr(content) {
	d(3,"sent:     "content)
	print content |& Service
}


# Print the individual input-bits and length
# (think control-character removal)
function debug_input() {
	for (i=0; i<=NF; i++) {
		print "$" i "(length:" length($i) "): \"" $i "\""
	}
}

# Calculate the number of CPUs and cache the result
function lib_get_cpus() {
	if (cpus > 0) {
		d(1,"cpus cached")
		return;
	}
	cpus = 0	
	while(getline stats <"/proc/stat") {
		if (stats ~ "^cpu[0-9]") {
			cpus++
		}
	}
	close("/proc/stat")
	d(1, "CPUS calculated: " cpus)
	hz=100
}

#############################
# Plugin helpers            #
#############################

# List plugins
function do_list() {
	mpr("load cpu varnish_req_rate")
}

# Initialize plugin variables. Executed once.
function init_plugin() {
	varnishstatbin = "/usr/local/bin/varnishstat -1 -n " hostname
	varnishstat["dummyvalue"] = ""
	varnishstathelp["dummyvalue"] = ""
	varnishstat_tim = 0
	args=""
}

#############################
# Plugins                   #
#############################

function plugin_load(args) {
	if (args == "config") {
		mpr("graph_title Load average")
		mpr("graph_args --base 1000 -l 0")
        	mpr("graph_vlabel load")
		mpr("graph_scale no")
		mpr("graph_category system")
        	mpr("load.label load")
        	mpr("graph_info The load average of the machine describes how many processes are in the run-queue (scheduled to run \"immediately\").")
		mpr("load.info 5 minute load average")
		return
	} else {
		getline <"/proc/loadavg"
		mpr("load.value " $2)
		close("/proc/loadavg")
		return
	}
}

function plugin_varnish_varnishstat() {
	if (time - varnishstat_tim  < 5 && varnishstat["uptime"] != 0) {
		d(5, "varnishstat cache hit. time: " time " varnishtat_tim: " varnishstat_tim)
		return;
	}
	while (varnishstatbin | getline) {
		varnishstat[$1] = $2
		varnishstathelp[$1] = $4
		for (i=5; i<NF; i++)
			varnishstathelp[$1] = varnishstathelp[$1] " " $i
	}
	if (debug >10 ) {
		for (a in varnishstat) {
			print "varnishstat[" a "]: " varnishstat[a]
		}
	}
	close (varnishstatbin)
	varnishstat_tim = time
}

function plugin_varnish(args) {
	d(2,"varnish plugin started")

	plugin_varnish_varnishstat()
	if (args == "config") {
		mpr("graph_title Varnish Request Rate")
		mpr("graph_category Varnish")
		mpr("cache_hit.type DERIVE")
		mpr("cache_hit.label Cache Hits")
		mpr("cache_miss.type DERIVE")
		mpr("cache_miss.label Cache Misses")
		mpr("client_req.type DERIVE")
		mpr("client_req.label Client requests")
		mpr("client_conn.type DERIVE")
		mpr("client_conn.label Client connections")
		return
	}
	primary[0] = "cache_hit"
	primary[1] = "cache_miss"
	primary[2] = "client_req"
	primary[3] = "client_conn"
	for (i=0; i<4; i++) {
		mpr(primary[i] ".value " varnishstat[primary[i]])
	}
}

function plugin_cpu(args) {

	# Mostly copy/pasted from the cpu-plugin, with "author unknown" and
	# gplv2. I don't really consider it big enough for that to matter,
	# though.
	
	lib_get_cpus()
	if (args == "config") {

		graphlimit = cpus * 100
		mpr("graph_title CPU usage")
		mpr("graph_order system user nice idle iowait irq softirq steal")
		mpr("graph_args --base 1000 -r --lower-limit 0 --upper-limit " graphlimit)
		mpr("graph_vlabel %")
		mpr("graph_scale no")
		mpr("graph_info This graph shows how CPU time is spent.")
		mpr("graph_category system")
		mpr("graph_period second")
		mpr("system.label system")
		mpr("system.draw AREA")
		mpr("system.min 0")
		mpr("system.type DERIVE")
		mpr("system.info CPU time spent by the kernel in system activities")
		mpr("user.label user")
		mpr("user.draw STACK")
		mpr("user.min 0")
		mpr("user.type DERIVE")
		mpr("user.info CPU time spent by normal programs and daemons")
		mpr("nice.label nice")
		mpr("nice.draw STACK")
		mpr("nice.min 0")
		mpr("nice.type DERIVE")
		mpr("nice.info CPU time spent by nice(1)d programs")
		mpr("idle.label idle")
		mpr("idle.draw STACK")
		mpr("idle.min 0")
		mpr("idle.type DERIVE")
		mpr("idle.info Idle CPU time")
		mpr("iowait.label iowait")
		mpr("iowait.draw STACK")
		mpr("iowait.min 0")
		mpr("iowait.type DERIVE")
		mpr("iowait.info CPU time spent waiting for I/O operations to finish when there is nothing else to do.")
		mpr("irq.label irq")
		mpr("irq.draw STACK")
		mpr("irq.min 0")
		mpr("irq.type DERIVE")
		mpr("irq.info CPU time spent handling interrupts")
		mpr("softirq.label softirq")
		mpr("softirq.draw STACK")
		mpr("softirq.min 0")
		mpr("softirq.type DERIVE")
		mpr("softirq.info CPU time spent handling \"batched\" interrupts")
                mpr("steal.label steal")
                mpr("steal.draw STACK")
                mpr("steal.min 0")
                mpr("steal.type DERIVE")
                mpr("steal.info The time that a virtual CPU had runnable tasks, but the virtual CPU itself was not running")
		return
	}

	# Note: Counters/derive need to report integer values.  Also we need
	# to avoid 10e+09 and the like %.0f should do this.
	#
	# FIXME: Use the proper gawk solution using CONVFMT

	while(getline <"/proc/stat") {
		if(/^cpu /) {
			printf "user.value %.0f\n", $2*100/hz	|& Service
			printf "nice.value %.0f\n", $3*100/hz	|& Service
			printf "system.value %.0f\n", $4*100/hz	|& Service
			printf "idle.value %.0f\n", $5*100/hz	|& Service
			printf "iowait.value %.0f\n", $6*100/hz	|& Service
			printf "irq.value %.0f\n", $7*100/hz	|& Service
			printf "softirq.value %.0f\n", $8*100/hz	|& Service
			printf "steal.value %.0f\n", $9*100/hz	|& Service
		}
	}
	close("/proc/stat")
}

#############################
# Execution core            #
#############################

# Handle a single command as received from a client. Input is already
# normalized to some degree and possibly "debugged"
function handle_command() {
	if (/^quit/) {
		mpr("# bye!")
		return -1
	} else if (/^list/) {
		do_list()
	} else if (/^(config|fetch) /) {
		switch ($2) {
			case "load":
				plugin_load($1)
				break
			case "cpu":
				plugin_cpu($1)
				break
			case "varnish_req_rate":
				plugin_varnish($1)
				break
			default:
				mpr("# No such plugin")
				break
		}
		mpr(".")
	} else if (/^version/) {
		mpr("munin node on " hostname domain " version: munin-node-awk")
	} else {
		mpr("# unknown command")
	}
}


# Outer event loop.
# Init the whole thing and keep it running.
BEGIN {
	if (debug>0) {
		LINT=1
	}
	# Configuration from commandline (-v port=foo)
	if (port == "") {
		port = "4919"
	}
	if (hostname == "") {
		"uname -n" | getline hostname
	}
	if (domain == "") {
		domain = ".awk"
	}

	init_plugin()
	Service = "/inet/tcp/" port "/0/0"
	d(1,"Listening socket: " Service)
	do {
		mpr("# munin node at " hostname domain)
		while ((Service |& getline)>0) {
			# Clean the input first
			gsub("[\r]*","")
			d(2,"received: " $0)
			if (debug>8) {
				debug_input()
			}
			time = systime()
			if (handle_command() <0)
				break;
		}
		close(Service)
	} while(1)
}
